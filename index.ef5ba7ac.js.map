{"mappings":"ACIA,IAeQ,EAfF,EAAe,SAAS,aAAa,CAAC,MAI5C,SAAS,EAAY,CAAW,SAC9B,AAAK,EAIE,WAAW,EAAY,OAAO,CAAC,aAAc,KAH3C,CAIX,CAOE,CAFM,EAAQ,MAAM,IAAI,CAAC,AAuBlB,EAvBuB,QAAQ,GAEhC,IAAI,CAAC,SAAC,CAAA,CAAG,CAAf,EACE,IAAM,EAAU,EAAY,EAAE,YAAY,CAAC,gBAG3C,OAAO,AAFS,EAAY,EAAE,YAAY,CAAC,gBAE1B,CACnB,GAEA,EAAM,OAAO,CAAC,SAAC,CAAf,EAAwB,OAAA,AAcjB,EAdsB,WAAW,CAAC,E,GAMlC,MAAM,IAAI,CAAC,AAUP,EAVY,QAAQ,EAAE,GAAG,CAAC,SAAC,CAAtC,EAAgD,MAAA,CAC9C,KAAM,EAAK,SAAS,CACpB,SAAU,EAAK,YAAY,CAAC,iBAC5B,OAAQ,EAAY,EAAK,YAAY,CAAC,gBACtC,IAAK,SAAS,EAAK,YAAY,CAAC,YAClC,C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// write code here\nvar employeeList = document.querySelector(\"ul\");\n// Convert the data-salary attribute from a string to a number\nfunction parseSalary(salarySring) {\n    if (!salarySring) return 0;\n    return parseFloat(salarySring.replace(/[^0-9.-]+/g, \"\"));\n}\n// Take a list element and sorts it by the data-salary attribute\nfunction sortList(list) {\n    var items = Array.from(list.children);\n    items.sort(function(a, b) {\n        var salaryA = parseSalary(a.getAttribute(\"data-salary\"));\n        var salaryB = parseSalary(b.getAttribute(\"data-salary\"));\n        return salaryB - salaryA;\n    });\n    items.forEach(function(item) {\n        return list.appendChild(item);\n    });\n}\n// Returns an array of employee objects with specified schema.\nfunction getEmployees(list) {\n    return Array.from(list.children).map(function(item) {\n        return {\n            name: item.innerText,\n            position: item.getAttribute(\"data-position\"),\n            salary: parseSalary(item.getAttribute(\"data-salary\")),\n            age: parseInt(item.getAttribute(\"data-age\"))\n        };\n    });\n}\nsortList(employeeList);\ngetEmployees(employeeList);\n\n//# sourceMappingURL=index.ef5ba7ac.js.map\n","'use strict';\n\n// write code here\n\nconst employeeList = document.querySelector('ul');\n\n// Convert the data-salary attribute from a string to a number\n\nfunction parseSalary(salarySring) {\n  if (!salarySring) {\n    return 0;\n  }\n\n  return parseFloat(salarySring.replace(/[^0-9.-]+/g, ''));\n}\n\n// Take a list element and sorts it by the data-salary attribute\n\nfunction sortList(list) {\n  const items = Array.from(list.children);\n\n  items.sort((a, b) => {\n    const salaryA = parseSalary(a.getAttribute('data-salary'));\n    const salaryB = parseSalary(b.getAttribute('data-salary'));\n\n    return salaryB - salaryA;\n  });\n\n  items.forEach((item) => list.appendChild(item));\n}\n\n// Returns an array of employee objects with specified schema.\n\nfunction getEmployees(list) {\n  return Array.from(list.children).map((item) => ({\n    name: item.innerText,\n    position: item.getAttribute('data-position'),\n    salary: parseSalary(item.getAttribute('data-salary')),\n    age: parseInt(item.getAttribute('data-age')),\n  }));\n}\n\nsortList(employeeList);\n\ngetEmployees(employeeList);\n"],"names":["items","employeeList","document","querySelector","parseSalary","salarySring","parseFloat","replace","Array","from","list","children","sort","a","b","salaryA","getAttribute","salaryB","forEach","item","appendChild","map","name","innerText","position","salary","age","parseInt"],"version":3,"file":"index.ef5ba7ac.js.map"}